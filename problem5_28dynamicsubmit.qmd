# Problem 5.28 {.unnumbered}


![Figure 1: A bar is attached to two wires with forces applied. ](images/202.png){fig-alt=" Picture with a 10 cm long bar attached to two wires. Wire a is 4 cm long and is made of brass. Wire b is 6 cm long and is made of aluminum. Force F1 is applied at 2 cm from the left and force F2 is applied at 10 cm from the left. Wire a is attached at the left end and wire be is attached 7 cm from the left end."}
\[Problem adapted from Â© Kurt Gramoll CC BY NC-SA 4.0\]

```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]

from shiny import App, render, ui, reactive
import random
import asyncio
import io
import math
import string
from datetime import datetime
from pathlib import Path

def generate_random_letters(length):
    # Generate a random string of letters of specified length
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))  

problem_ID="202"
db=reactive.Value("__")
da=reactive.Value("__")
F1=reactive.Value("__")
F2=reactive.Value("__")
  
attempts=["Timestamp,Attempt,Answer,Feedback\n"]

app_ui = ui.page_fluid(
    ui.markdown("**Please enter your ID number from your instructor and click to generate your problem**"),
    ui.input_text("ID","", placeholder="Enter ID Number Here"),
    ui.input_action_button("generate_problem", "Generate Problem", class_="btn-primary"),
    ui.markdown("**Problem Statement**"),
    ui.output_ui("ui_problem_statement"),
    ui.input_text("answer","Your Answer in units of degrees", placeholder="Please enter your answer"),
    ui.input_action_button("submit", "Submit Answer", class_="btn-primary"),
    ui.download_button("download", "Download File to Submit", class_="btn-success"),
)

def server(input, output, session):
    # Initialize a counter for attempts
    attempt_counter = reactive.Value(0)

    @output
    @render.ui
    def ui_problem_statement():
        return[ui.markdown(f"A bar is attached to two wires, one brass (diameter d<sub>b</sub> = {db()} mm) and one aluminum (diameter d<sub>a</sub> = {da()} mm). Loads F<sub>1</sub> = {F1()} kN and F<sub>2</sub> = {F2()} kN are applied as shown. Determine the angle of the bar from horizontal after the loads are applied.")]
    
    @reactive.Effect
    @reactive.event(input.generate_problem)
    def randomize_vars():
        random.seed(input.ID())
        db.set(random.randrange(32,60,2))
        da.set(random.randrange(20,30,2))
        F1.set(random.randrange(10,50,1))
        F2.set(random.randrange(10,50,1))

    @reactive.Effect
    @reactive.event(input.submit)
    def _():
        attempt_counter.set(attempt_counter() + 1)  # Increment the attempt counter on each submission.
        FA = (2*F1()+10*F2())/7
        FB = F1()+F2()-FA
        EB = 100*10**9
        EA = 70*10**9
        delB = FB*1000*0.04/((db()/2000)**2*math.pi*EB)
        delA = FA*1000*0.06/((da()/2000)**2*math.pi*EA)
        instr = math.atan((delA-delB)/0.07)*180/math.pi
        
        if math.isclose(float(input.answer()), instr, rel_tol=0.01):
            check = "*Correct*"
            correct_indicator = "JL"
        else:
            check = "*Not Correct.*"
            correct_indicator = "JG"

        # Generate random parts for the encoded attempt.
        random_start = generate_random_letters(4)
        random_middle = generate_random_letters(4)
        random_end = generate_random_letters(4)
        encoded_attempt = f"{random_start}{problem_ID}-{random_middle}{attempt_counter()}{correct_indicator}-{random_end}{input.ID()}"

        # Store the most recent encoded attempt in a reactive value so it persists across submissions
        session.encoded_attempt = reactive.Value(encoded_attempt)

        # Append the attempt data to the attempts list without the encoded attempt
        attempts.append(f"{datetime.now()}, {attempt_counter()}, {input.answer()}, {check}\n")

        # Show feedback to the user.
        feedback = ui.markdown(f"Your answer of {input.answer()} is {check}. For reference in debugging this, the calculated instructor answer is {instr}")
        m = ui.modal(
            feedback,
            title="Feedback",
            easy_close=True
        )
        ui.modal_show(m)

    @session.download(filename=lambda: f"Problem_Log-{problem_ID}-{input.ID()}.csv")
    async def download():
        # Start the CSV with the encoded attempt (without label)
        final_encoded = session.encoded_attempt() if session.encoded_attempt is not None else "No attempts"
        yield f"{final_encoded}\n\n"
        
        # Write the header for the remaining CSV data once
        yield "Timestamp,Attempt,Answer,Feedback\n"
        
        # Write the attempts data, ensure that the header from the attempts list is not written again
        for attempt in attempts[1:]:  # Skip the first element which is the header
            await asyncio.sleep(0.25)  # This delay may not be necessary; adjust as needed
            yield attempt

# App installation
app = App(app_ui, server)
```
