# Problem 7.29 {.unnumbered}

This is a dynamic rendering of the problem with dynamic variables based on the username entered. 

## Problem Image

![Figure 1: A beam is subjected to a non-uniform distributed load. ](images/334.png){fig-alt="A beam is subjected to a non-unform distributed load, w1 at A and w2 at B with supports at B and C. The distance between A and B is 4 ft, the distance between B and C is 5 ft and the distance between C and D is 4 ft."}

```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]
from shiny import App, render, ui, reactive
import random
import asyncio
import io
import math
import string
from datetime import datetime
from pathlib import Path

def generate_random_letters(length):
    # Generate a random string of letters of specified length
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))

problem_ID="334"
w1=reactive.Value("__")
w2=reactive.Value("__")
attempts=["Timestamp,Attempt,Answer,Feedback\n"]

app_ui = ui.page_fluid(
    ui.markdown("**Please enter your ID number from your instructor and click to generate your problem**"),
    ui.input_text("ID","", placeholder="Enter ID Number Here"),
    ui.input_action_button("generate_problem", "Generate Problem", class_="btn-primary"),
    ui.markdown("**Problem Statement**"),
    ui.output_ui("ui_problem_statement"),
    ui.input_text("answer1","Maximum absolute shear force in units of kip", placeholder="Please enter your answer 1"),
    ui.input_text("answer2","Maximum absolute bending moment in units of kip-ft", placeholder="Please enter your answer 2"),
    ui.input_action_button("submit", "Submit Answers", class_="btn-primary"),
    ui.download_button("download", "Download File to Submit", class_="btn-success"),
)

def server(input, output, session):
    # Initialize a counter for attempts
    attempt_counter = reactive.Value(0)
    
    @output
    @render.ui
    def ui_problem_statement():
        return[ui.markdown(f"Plot the shear force and bending moment diagrams for the loading shown. Assume w<sub>1</sub> = {w1()} kip/ft and w<sub>2</sub> = {w2()} kip/ft. What is the maximum absolute shear force and maximum absolute bending moment?")]
    
    @reactive.Effect
    @reactive.event(input.generate_problem)
    def randomize_vars():
        random.seed(input.ID())
        w1.set(random.randrange(10, 300, 1)/10)
        w2.set(w1()*2)
    @reactive.Effect
    @reactive.event(input.submit)
    def _():
        attempt_counter.set(attempt_counter() + 1)
        By = 13*(w2()-w1())/30+6.5*w1()
        Cy = 13*w1()+13*(w2()-w1())/2-By
   #    instr1= abs(By+Cy-9*w1()-162/(13*(w2()-w1())))
   #    instr2 = abs(5*By-81*w1()/2-486/(13*(w2()-w1())))
        instr1 = 5.1854*w1()
        instr2 = 15.17*w1()
        correct1 = math.isclose(float(input.answer1()), instr1, rel_tol=0.01)
        correct2 = math.isclose(float(input.answer2()), instr2, rel_tol=0.01)
        
        if correct1 and correct2:
            check = "both correct."
        else:
            check = f" {'correct' if correct1 else 'incorrect'} and {'correct respectively' if correct2 else 'incorrect respectively'}."
        
        correct_indicator = "JL" if correct1 and correct2 else "JG"

        # Generate random parts for the encoded attempt.
        random_start = generate_random_letters(4)
        random_middle = generate_random_letters(4)
        random_end = generate_random_letters(4)
        encoded_attempt = f"{random_start}{problem_ID}-{random_middle}{attempt_counter()}{correct_indicator}-{random_end}{input.ID()}"

        # Store the most recent encoded attempt in a reactive value so it persists across submissions
        session.encoded_attempt = reactive.Value(encoded_attempt)

        # Append the attempt data to the attempts list without the encoded attempt
        attempts.append(f"{datetime.now()}, {attempt_counter()}, {input.answer1()}, {input.answer2()}, {check}\n")

        # Show feedback to the user.
        feedback = ui.markdown(f"Your answers of {input.answer1()} and {input.answer2()} are {check} For reference in debugging this, the calculated instructor answers are {instr1} and {instr2}.")
        m = ui.modal(feedback, title="Feedback", easy_close=True)
        ui.modal_show(m)

    @session.download(filename=lambda: f"Problem_Log-{problem_ID}-{input.ID()}.csv")
    async def download():
        # Start the CSV with the encoded attempt (without label)
        final_encoded = session.encoded_attempt() if session.encoded_attempt is not None else "No attempts"
        yield f"{final_encoded}\n\n"
        
        # Write the header for the remaining CSV data once
        yield "Timestamp,Attempt,Answer,Feedback\n"
        
        # Write the attempts data, ensure that the header from the attempts list is not written again
        for attempt in attempts[1:]:  # Skip the first element which is the header
            await asyncio.sleep(0.25)  # This delay may not be necessary; adjust as needed
            yield attempt

# App installation
app = App(app_ui, server)
```
