# Problem 9.2 - Bending Stress {.unnumbered}

![Figure 1: A beam has a force applied to it.](images/343.png){fig-alt="A rectangular beam with a rectangular cutout of length 2L stretches from Point A to Point B. A force F is applied at L/2 from A. The beam cross section has a width of 2b1+b2 and a height of 2h1+h2. The cutout has a width of b2 and a height of h1."}
\[Problem adapted from Â© Kurt Gramoll CC BY NC-SA 4.0\]

```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]

from shiny import App, render, ui, reactive
import random
import asyncio
import io
import math
import string
from datetime import datetime
from pathlib import Path

def generate_random_letters(length):
    # Generate a random string of letters of specified length
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))  

problem_ID="343"
b1=reactive.Value("__")
b2=reactive.Value("__")
h1=reactive.Value("__")
h2=reactive.Value("__")
F=reactive.Value("__")
L=reactive.Value("__")
  
attempts=["Timestamp,Attempt,Answer,Feedback\n"]

app_ui = ui.page_fluid(
    ui.markdown("**Please enter your ID number from your instructor and click to generate your problem**"),
    ui.input_text("ID","", placeholder="Enter ID Number Here"),
    ui.input_action_button("generate_problem", "Generate Problem", class_="btn-primary"),
    ui.markdown("**Problem Statement**"),
    ui.output_ui("ui_problem_statement"),
    ui.input_text("answer","Your Answer in units of MPa", placeholder="Please enter your answer"),
    ui.input_action_button("submit", "Submit Answer", class_="btn-primary"),
    ui.download_button("download", "Download File to Submit", class_="btn-success"),
)

def server(input, output, session):
    # Initialize a counter for attempts
    attempt_counter = reactive.Value(0)

    @output
    @render.ui
    def ui_problem_statement():
        return[ui.markdown(f"A beam has the cross-section shown, where b<sub>1</sub> = {b1()} mm, b<sub>2</sub> = {b2()} mm, h<sub>1</sub> = {h1()} mm, and h<sub>2</sub> = {h2()} mm. The beam is subjected to a concentrated load F = {F()} kN at its midpoint. If length L = {L()} m, determine the magnitude of the maximum bending stress in the beam.")]
    
    @reactive.Effect
    @reactive.event(input.generate_problem)
    def randomize_vars():
        random.seed(input.ID())
        b1.set(random.randrange(10, 20, 1))
        b2.set((b1()*3))
        h1.set((b1()*2))
        h2.set(b1())
        F.set(random.randrange(20, 300, 1)/10)
        L.set(random.randrange(20, 100, 1)/10)
        
    @reactive.Effect
    @reactive.event(input.submit)
    def _():
        attempt_counter.set(attempt_counter() + 1)  # Increment the attempt counter on each submission.
        Ay = F()/2
        M = Ay*L()
        A1 = (2*h1()+h2())*(2*b1()+b2())
        y1 = (2*h1()+h2())/2
        A2 = h1()*b2()
        y2 = 3*h1()/2
        yc = (A1*y1-A2*y2)/(A1-A2)
        I1 = ((2*b1()+b2())*(2*h1()+h2())**3)/12
        I2 = (b2()*h1()**3)/12
        Ic = ((I1+A1*(y1-yc)**2)-(I2+A2*(y2-yc)**2))/(10**12)
        instr= (M*(2*h1()+h2()-yc)/Ic)/10**6
        if math.isclose(float(input.answer()), instr, rel_tol=0.01):
            check = "*Correct*"
            correct_indicator = "JL"
        else:
            check = "*Not Correct.*"
            correct_indicator = "JG"

        # Generate random parts for the encoded attempt.
        random_start = generate_random_letters(4)
        random_middle = generate_random_letters(4)
        random_end = generate_random_letters(4)
        encoded_attempt = f"{random_start}{problem_ID}-{random_middle}{attempt_counter()}{correct_indicator}-{random_end}{input.ID()}"

        # Store the most recent encoded attempt in a reactive value so it persists across submissions
        session.encoded_attempt = reactive.Value(encoded_attempt)

        # Append the attempt data to the attempts list without the encoded attempt
        attempts.append(f"{datetime.now()}, {attempt_counter()}, {input.answer()}, {check}\n")

        # Show feedback to the user.
        feedback = ui.markdown(f"Your answer of {input.answer()} is {check}.")
        m = ui.modal(
            feedback,
            title="Feedback",
            easy_close=True
        )
        ui.modal_show(m)

    @session.download(filename=lambda: f"Problem_Log-{problem_ID}-{input.ID()}.csv")
    async def download():
        # Start the CSV with the encoded attempt (without label)
        final_encoded = session.encoded_attempt() if session.encoded_attempt is not None else "No attempts"
        yield f"{final_encoded}\n\n"
        
        # Write the header for the remaining CSV data once
        yield "Timestamp,Attempt,Answer,Feedback\n"
        
        # Write the attempts data, ensure that the header from the attempts list is not written again
        for attempt in attempts[1:]:  # Skip the first element which is the header
            await asyncio.sleep(0.25)  # This delay may not be necessary; adjust as needed
            yield attempt


# App installation
app = App(app_ui, server)
```
