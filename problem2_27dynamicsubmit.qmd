# Problem 2.27 {.unnumbered}

![Figure 1: A simply supported beam rests on a sloping wall and is bolted as shown.](images/175.png){fig-alt="Pictue of a simply supported beam of length L resting on a sloping wall of angle theta and bolted at the other wall with a bolt of diameter d. The beam is subjected to a triangular distributed load w."}
\[Problem adapted from © Kurt Gramoll CC BY NC-SA 4.0\]

```{shinylive-python}
# | standalone: true
# | viewerHeight: 600
# | components: [viewer]

from shiny import App, render, ui, reactive
import random
import asyncio
import io
import math
import string
from datetime import datetime
from pathlib import Path

def generate_random_letters(length):
    # Generate a random string of letters of specified length
    return "".join(random.choice(string.ascii_lowercase) for _ in range(length))

problem_ID = "175"
theta = reactive.Value("__")
d = reactive.Value("__")
w0 = reactive.Value("__")
L = reactive.Value("__")
attempts = ["Timestamp,Attempt,Answer,Feedback\n"]

app_ui = ui.page_fluid(
    ui.markdown(
        "**Please enter your ID number from your instructor and click to generate your problem**"
    ),
    ui.input_text("ID", "", placeholder="Enter ID Number Here"),
    ui.input_action_button(
        "generate_problem", "Generate Problem", class_="btn-primary"
    ),
    ui.markdown("**Problem Statement**"),
    ui.output_ui("ui_problem_statement"),
    ui.input_text(
        "answer", "Your Answer in units of MPa", placeholder="Please enter your answer"
    ),
    ui.input_action_button("submit", "Submit Answer", class_="btn-primary"),
    ui.download_button("download", "Download File to Submit", class_="btn-success"),
)

def server(input, output, session):
    # Initialize a counter for attempts
    attempt_counter = reactive.Value(0)

    @output
    @render.ui
    def ui_problem_statement():
        return [
            ui.markdown(
                f"One side of a beam rests on a sloping wall at angle Θ = {theta()}°. The other end is bolted to a wall with a bolt of diameter d = {d()} mm. If load w<sub>0</sub> = {w0()} kN/m and length L = {L()} m, determine the shear stres in the bolt."
            )
        ]

    @reactive.Effect
    @reactive.event(input.generate_problem)
    def randomize_vars():
        random.seed(input.ID())
        theta.set(random.randrange(55,65,1))
        d.set(random.randrange(10,30,1))
        w0.set(random.randrange(5,20,1))
        L.set(random.randrange(10,50,1)/10)
        
    @reactive.Effect
    @reactive.event(input.submit)
    def _():
        attempt_counter.set(
            attempt_counter() + 1
        )  # Increment the attempt counter on each submission.

        # Calculate the instructor's answer and determine if the user's answer is correct.
        By = w0()*L()/2/3
        Ay = w0()*L()/2-By
        Ax = Ay*math.tan(theta()*math.pi/180)
        Bx = Ax
        Babs = (By**2+Bx**2)**0.5
        P = Babs/2
        instr = P/((d()/2)**2*math.pi)*10**3

        if math.isclose(float(input.answer()), instr, rel_tol=0.01):
            check = "*Correct*"
            correct_indicator = "JL"
        else:
            check = "*Not Correct.*"
            correct_indicator = "JG"

        # Generate random parts for the encoded attempt.
        random_start = generate_random_letters(4)
        random_middle = generate_random_letters(4)
        random_end = generate_random_letters(4)
        encoded_attempt = f"{random_start}{problem_ID}-{random_middle}{attempt_counter()}{correct_indicator}-{random_end}{input.ID()}"

        # Store the most recent encoded attempt in a reactive value so it persists across submissions
        session.encoded_attempt = reactive.Value(encoded_attempt)

        # Append the attempt data to the attempts list without the encoded attempt
        attempts.append(f"{datetime.now()}, {attempt_counter()}, {input.answer()}, {check}\n")

        # Show feedback to the user.
        feedback = ui.markdown(f"Your answer of {input.answer()} is {check}.")
        m = ui.modal(
            feedback,
            title="Feedback",
            easy_close=True
        )
        ui.modal_show(m)

    @session.download(filename=lambda: f"Problem_Log-{problem_ID}-{input.ID()}.csv")
    async def download():
        # Start the CSV with the encoded attempt (without label)
        final_encoded = session.encoded_attempt() if session.encoded_attempt is not None else "No attempts"
        yield f"{final_encoded}\n\n"
        
        # Write the header for the remaining CSV data once
        yield "Timestamp,Attempt,Answer,Feedback\n"
        
        # Write the attempts data, ensure that the header from the attempts list is not written again
        for attempt in attempts[1:]:  # Skip the first element which is the header
            await asyncio.sleep(0.25)  # This delay may not be necessary; adjust as needed
            yield attempt

# App installation
app = App(app_ui, server)
```
