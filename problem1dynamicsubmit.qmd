# Dynamic Problem Statement {.unnumbered}

This is a dynamic rendering of the problem with dynamic variables based on the username entered. Please note at this time that the figure displays incorrect values.  This will be corrected when drawn by the graphic artist.

## Problem Image
![Figure 1: Three traffic light installation with loads](images/stoplights.png){fig-alt="Picture with three distinct traffic lights oriented along the same horizontal beam. Moving from left to right of the image, the first light A is at the end of the beam, the second light B is 4 ft from A, the third light C is 4 ft from light B, and light C is 7 ft from where the horizontal beam meets the vertical post (called post O). The free body diagram includes a downforce force acting on light A with a value of 65 pounds, a downward force acting on light B with a value of 50 points, a downward force acting on light C with a value of 50 pounds, and a reaction Moment M and Force N at the post at O."}


## Problem Statement

A city planner is installing a new traffic light. Light A weighs 65 lb, while lights B and C weigh 50 lb each. The post at O has a hollow circular cross-section with an outer diameter of 5 inches and a wall thickness of 0.2 inches. Please calculate the magnitude of the maximum combined stress in the post. You may ignore the weight of the post.


```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]

from shiny import App, render, ui, reactive
import random
import asyncio
import io
from datetime import date
from pathlib import Path

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.input_text("name","User Name", value="test"),
    ui.output_text_verbatim("txt"),
    ui.output_text_verbatim("txt2"),
    ui.input_action_button("btn", "Set Seed"),
    ui.download_button("download3", "Download CSV"),
)


def server(input, output, session):
    @output
    @render.text
    def txt():
        return input.name()

    @output
    @render.text
    @reactive.event(input.btn)
    def txt2():
        random.seed(hash(input.name()))
        bleh=random.random()
        return random.random()

    @session.download(
        filename=lambda: f"data-{input.name()}.csv"
    )
    async def download3():
        # This version uses a function to generate the filename. It also yields data
        # multiple times.
        await asyncio.sleep(0.25)
        yield "one,two,three\n"
        yield "新,1,2\n"
        yield "型,4,5\n"
        yield f"{input.name()},{random.random()}"
        

app = App(app_ui, server)

```