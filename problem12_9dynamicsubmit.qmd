# Problem 12.9 {.unnumbered}


![Figure 1: A beam is subjected to a distributed load and force applied. ](images/508.png){fig-alt="A member is subjected to a state of stress caused by sigma_x, sigma_y, and tau_xy."}
\[Problem adapted from © Kurt Gramoll CC BY NC-SA 4.0\]

```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]

from shiny import App, render, ui, reactive
import random
import asyncio
import io
import math
import string
from datetime import datetime
from pathlib import Path

def generate_random_letters(length):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))

problem_ID = "508"
sigma_x = reactive.Value("__")
sigma_y = reactive.Value("__")
tau_xy = reactive.Value("__")

attempts = ["Timestamp,Attempt,Answer1,Answer2,Feedback\n"]

app_ui = ui.page_fluid(
    ui.markdown("**Please enter your ID number from your instructor and click to generate your problem**"),
    ui.input_text("ID", "", placeholder="Enter ID Number Here"),
    ui.input_action_button("generate_problem", "Generate Problem", class_="btn-primary"),
    ui.markdown("**Problem Statement**"),
    ui.output_ui("ui_problem_statement"),
    ui.input_text("answer1", "Your 1st principal stress in units of MPa", placeholder="Please enter your σ1"),
    ui.input_text("answer2", "Your 1st pricipal direction in units of degrees", placeholder="Please enter your angle"),
    ui.input_action_button("submit", "Submit Answers", class_="btn-primary"),
    ui.download_button("download", "Download File to Submit", class_="btn-success"),
)

def server(input, output, session):
    attempt_counter = reactive.Value(0)

    @output
    @render.ui
    def ui_problem_statement():
        return [ui.markdown(f"The state of stress at a point in a beam is shown, where σ<sub>x</sub> = {sigma_x()} MPa, σ<sub>y</sub> = {sigma_y()} MPa, and τ<sub>xy</sub> = {tau_xy()} MPa. Determine the maximum principal stress σ<sub>1</sub> for this state of stress, and the angle at which this stress occurs, measured counterclockwise from the x-axis.")]

    @reactive.Effect
    @reactive.event(input.generate_problem)
    def randomize_vars():
        random.seed(input.ID())
        sigma_x.set(random.randrange(10, 50, 1))
        sigma_y.set(sigma_x()+random.randrange(10, 30, 1))
        tau_xy.set(random.randrange(10, 50, 1))

    @reactive.Effect
    @reactive.event(input.submit)
    def _():
        attempt_counter.set(attempt_counter() + 1)
        instr1 = (sigma_x()+sigma_y())/2+math.sqrt(((sigma_x()-sigma_y())/2)**2+tau_xy()**2)
        instr2 = 90+(math.atan(2*tau_xy()/(sigma_x()-sigma_y())))/2*180/math.pi
        correct1 = math.isclose(float(input.answer1()), instr1, rel_tol=0.01)
        correct2 = math.isclose(float(input.answer2()), instr2, rel_tol=0.01)
    
        if correct1 and correct2:
            check = "both correct."
        else:
            check = f" {'correct' if correct1 else 'incorrect'} and {'correct respectively' if correct2 else 'incorrect respectively'}."
        
        correct_indicator = "JL" if correct1 and correct2 else "JG"

        random_start = generate_random_letters(4)
        random_middle = generate_random_letters(4)
        random_end = generate_random_letters(4)
        encoded_attempt = f"{random_start}{problem_ID}-{random_middle}{attempt_counter()}{correct_indicator}-{random_end}{input.ID()}"

        session.encoded_attempt = reactive.Value(encoded_attempt)
        attempts.append(f"{datetime.now()}, {attempt_counter()}, {input.answer1()}, {input.answer2()}, {check}\n")

        feedback = ui.markdown(f"Your answers of {input.answer1()} and {input.answer2()} are {check}.")
        m = ui.modal(feedback, title="Feedback", easy_close=True)
        ui.modal_show(m)

    @session.download(filename=lambda: f"Problem_Log-{problem_ID}-{input.ID()}.csv")
    async def download():
        final_encoded = session.encoded_attempt() if session.encoded_attempt is not None else "No attempts"
        yield f"{final_encoded}\n\n"
        yield "Timestamp,Attempt,Answer1,Answer2,Feedback\n"
        for attempt in attempts[1:]:
            await asyncio.sleep(0.25)
            yield attempt

app = App(app_ui, server)
```
