# Problem 12.32 - Mohr's Circle {.unnumbered}

![Figure 1: A state of stress.](images/532.png){fig-alt="Picture with a state of stress. Sigma_y is applied inwards and sigma_x is applied towards the upper left and bottom right corners."}
\[Problem adapted from © Kurt Gramoll CC BY NC-SA 4.0\]
```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]

from shiny import App, render, ui, reactive
import random
import asyncio
import io
import math
import string
from datetime import datetime
from pathlib import Path

def generate_random_letters(length):
    # Generate a random string of letters of specified length
    return "".join(random.choice(string.ascii_lowercase) for _ in range(length))

problem_ID = "532"
sigmax = reactive.Value("__")
sigmay = reactive.Value("__")
tauxy = reactive.Value("__")

attempts = ["Timestamp,Attempt,Answer1,Answer2,Feedback\n"]

app_ui = ui.page_fluid(
    ui.markdown("**Please enter your ID number from your instructor and click to generate your problem**"),
    ui.input_text("ID", "", placeholder="Enter ID Number Here"),
    ui.input_action_button("generate_problem", "Generate Problem", class_="btn-primary"),
    ui.markdown("**Problem Statement**"),
    ui.output_ui("ui_problem_statement"),
    ui.input_text("answer1", "Your Answer 1 in units of MPa", placeholder="Please enter your answer 1"),
    ui.input_text("answer2", "Your Answer 2 in units of degrees", placeholder="Please enter your answer 2"),
    ui.input_action_button("submit", "Submit Answers", class_="btn-primary"),
    ui.download_button("download", "Download File to Submit", class_="btn-success"),
)

def server(input, output, session):
    # Initialize a counter for attempts
    attempt_counter = reactive.Value(0)

    @output
    @render.ui
    def ui_problem_statement():
        return [
            ui.markdown(
                f"The state of stress at a point in a beam is shown, where σ<sub>x</sub> = {sigmax()} MPa, σ<sub>y</sub> = {sigmay()} MPa, and τ<sub>xy</sub> = {tauxy()} MPa. Construct Mohr's Circle for the given state of stress. Then determine the minimum principal stress σ<sub>2</sub> for this state of stress, and the angle at which this stress occurs, measured counterclockwise from the x-axis."
            )
        ]

    @reactive.Effect
    @reactive.event(input.generate_problem)
    def randomize_vars():
        random.seed(input.ID())
        sigmay.set(random.randrange(10,50,1))
        sigmax.set(sigmay()+random.randrange(10,30,1))
        tauxy.set(random.randrange(10,50,1))
        
    @reactive.Effect
    @reactive.event(input.submit)
    def _():
        attempt_counter.set(
            attempt_counter() + 1
        )  # Increment the attempt counter on each submission.

        # Calculate the instructor's answer and determine if the user's answer is correct.
        instr1 = (-sigmax()-sigmay())/2-(((-sigmax()+sigmay())/2)**2+tauxy()**2)**0.5
        instr2 = 180+(math.atan(sigmay()/(sigmax()))*180/math.pi)

        correct1 = math.isclose(float(input.answer1()), instr1, rel_tol=0.01)
        correct2 = math.isclose(float(input.answer2()), instr2, rel_tol=0.01)
        
        if correct1 and correct2:
            check = f"{'both correct'}"
        elif correct1:
            check = f" {'correct for answer 1 and incorrect for answer 2'}"
        elif correct2:
            check = f"{'incorrect for answer 1 and correct for answer 2'}"
        else:
            check = f"{'both incorrect'}"
        
        correct_indicator = "JL" if correct1 and correct2 else "JG"

        random_start = generate_random_letters(4)
        random_middle = generate_random_letters(4)
        random_end = generate_random_letters(4)
        encoded_attempt = f"{random_start}{problem_ID}-{random_middle}{attempt_counter()}{correct_indicator}-{random_end}{input.ID()}"

        session.encoded_attempt = reactive.Value(encoded_attempt)
        attempts.append(f"{datetime.now()}, {attempt_counter()}, {input.answer1()}, {input.answer2()}, {check}\n")

        feedback = ui.markdown(f"Your answers of {input.answer1()} and {input.answer2()} are {check}. For reference in debugging this, the calculated instructor answers are {instr1} and {instr2}")
        m = ui.modal(feedback, title="Feedback", easy_close=True)
        ui.modal_show(m)

    @session.download(filename=lambda: f"Problem_Log-{problem_ID}-{input.ID()}.csv")
    async def download():
        final_encoded = session.encoded_attempt() if session.encoded_attempt is not None else "No attempts"
        yield f"{final_encoded}\n\n"
        yield "Timestamp,Attempt,Answer1,Answer2,Feedback\n"
        for attempt in attempts[1:]:
            await asyncio.sleep(0.25)
            yield attempt

app = App(app_ui, server)
```
